// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Fri Nov 09 05:54:23 2018

decode decode_inst
(
	.rst(rst_sig) ,	// input  rst_sig
	.clk(clk_sig) ,	// input  clk_sig
	.ins_rdy(ins_rdy_sig) ,	// input  ins_rdy_sig
	.instr(instr_sig) ,	// input [15:0] instr_sig
	.ext_rdy(ext_rdy_sig) ,	// input  ext_rdy_sig
	.ext_wd(ext_wd_sig) ,	// input [15:0] ext_wd_sig
	.imm_rdy(imm_rdy_sig) ,	// input  imm_rdy_sig
	.imm_wd(imm_wd_sig) ,	// input [15:0] imm_wd_sig
	.user_mode(user_mode_sig) ,	// input  user_mode_sig
	.ccr_in(ccr_in_sig) ,	// input [3:0] ccr_in_sig
	.dec_jmp(dec_jmp_sig) ,	// output [11:0] dec_jmp_sig
	.ea1_jmp(ea1_jmp_sig) ,	// output [3:0] ea1_jmp_sig
	.ea2_jmp(ea2_jmp_sig) ,	// output [3:0] ea2_jmp_sig
	.imm_val(imm_val_sig) ,	// output [15:0] imm_val_sig
	.ea1_bit(ea1_bit_sig) ,	// output [15:0] ea1_bit_sig
	.cc_jmp(cc_jmp_sig) ,	// output  cc_jmp_sig
	.ext_inst(ext_inst_sig) ,	// output  ext_inst_sig
	.bit_inst(bit_inst_sig) ,	// output  bit_inst_sig
	.vld_inst(vld_inst_sig) 	// output  vld_inst_sig
);

