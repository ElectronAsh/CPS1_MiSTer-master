// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Tue Feb 19 08:24:38 2019

sdram_ctrl_16b sdram_ctrl_16b_inst
(
	.rst(rst) ,	// input  rst
	.clk(clk) ,	// input  clk
	.ram_rdy_n(ram_rdy_n) ,	// output  ram_rdy_n
	.ram_ref(ram_ref) ,	// output  ram_ref
	.ram_cyc(ram_cyc) ,	// output [3:0] ram_cyc
	.ram_acc(ram_acc) ,	// output [3:0] ram_acc
	.ram_slot(ram_slot) ,	// output [8:0] ram_slot
	.slot_rst(slot_rst) ,	// output  slot_rst
	.rd_data(rd_data) ,	// output [15:0] rd_data
	.rden_b0(rden_b0) ,	// input  rden_b0
	.wren_b0(wren_b0) ,	// input  wren_b0
	.addr_b0(addr_b0) ,	// input [31:0] addr_b0
	.valid_b0(valid_b0) ,	// output  valid_b0
	.fetch_b0(fetch_b0) ,	// output  fetch_b0
	.wr_bena_b0(wr_bena_b0) ,	// input [1:0] wr_bena_b0
	.wr_data_b0(wr_data_b0) ,	// input [15:0] wr_data_b0
	.rden_b1(rden_b1) ,	// input  rden_b1
	.wren_b1(wren_b1) ,	// input  wren_b1
	.addr_b1(addr_b1) ,	// input [31:0] addr_b1
	.valid_b1(valid_b1) ,	// output  valid_b1
	.fetch_b1(fetch_b1) ,	// output  fetch_b1
	.wr_bena_b1(wr_bena_b1) ,	// input [1:0] wr_bena_b1
	.wr_data_b1(wr_data_b1) ,	// input [15:0] wr_data_b1
	.rden_b2(rden_b2) ,	// input  rden_b2
	.wren_b2(wren_b2) ,	// input  wren_b2
	.addr_b2(addr_b2) ,	// input [31:0] addr_b2
	.valid_b2(valid_b2) ,	// output  valid_b2
	.fetch_b2(fetch_b2) ,	// output  fetch_b2
	.wr_bena_b2(wr_bena_b2) ,	// input [1:0] wr_bena_b2
	.wr_data_b2(wr_data_b2) ,	// input [15:0] wr_data_b2
	.rden_b3(rden_b3) ,	// input  rden_b3
	.wren_b3(wren_b3) ,	// input  wren_b3
	.addr_b3(addr_b3) ,	// input [31:0] addr_b3
	.valid_b3(valid_b3) ,	// output  valid_b3
	.fetch_b3(fetch_b3) ,	// output  fetch_b3
	.wr_bena_b3(wr_bena_b3) ,	// input [1:0] wr_bena_b3
	.wr_data_b3(wr_data_b3) ,	// input [15:0] wr_data_b3
	.sdram_cs_n(sdram_cs_n) ,	// output  sdram_cs_n
	.sdram_ras_n(sdram_ras_n) ,	// output  sdram_ras_n
	.sdram_cas_n(sdram_cas_n) ,	// output  sdram_cas_n
	.sdram_we_n(sdram_we_n) ,	// output  sdram_we_n
	.sdram_ba(sdram_ba) ,	// output [1:0] sdram_ba
	.sdram_addr(sdram_addr) ,	// output [12:0] sdram_addr
	.sdram_dqm_n(sdram_dqm_n) ,	// output [1:0] sdram_dqm_n
	.sdram_dq_oe(sdram_dq_oe) ,	// output  sdram_dq_oe
	.sdram_dq_o(sdram_dq_o) ,	// output [15:0] sdram_dq_o
	.sdram_dq_i(sdram_dq_i) 	// input [15:0] sdram_dq_i
);

defparam sdram_ctrl_16b_inst.Tco_dly = 4.5;
defparam sdram_ctrl_16b_inst.SLOT_CTR_REFR = 284;
defparam sdram_ctrl_16b_inst.NUM_REFR_LINE = 9;
defparam sdram_ctrl_16b_inst.SLOT_CTR_START = 3;
defparam sdram_ctrl_16b_inst.SLOT_CTR_STOP = 288;
defparam sdram_ctrl_16b_inst.ACC_CTR_STOP = 3;
defparam sdram_ctrl_16b_inst.INIT_LINES = 4;
defparam sdram_ctrl_16b_inst.SDR_ROW_WIDTH = 12;
defparam sdram_ctrl_16b_inst.SDR_COL_WIDTH = 9;
defparam sdram_ctrl_16b_inst.SDR_CLOCK_FREQ = 50;
defparam sdram_ctrl_16b_inst.SDR_BURST_LEN = 2;
