// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Fri Nov 09 05:54:23 2018

mem_io mem_io_inst
(
	.rst(rst_sig) ,	// input  rst_sig
	.clk(clk_sig) ,	// input  clk_sig
	.rd_ena(rd_ena_sig) ,	// output  rd_ena_sig
	.wr_ena(wr_ena_sig) ,	// output  wr_ena_sig
	.data_ack(data_ack_sig) ,	// input  data_ack_sig
	.byte_ena(byte_ena_sig) ,	// output [1:0] byte_ena_sig
	.address(address_sig) ,	// output [31:0] address_sig
	.rd_data(rd_data_sig) ,	// input [15:0] rd_data_sig
	.wr_data(wr_data_sig) ,	// output [15:0] wr_data_sig
	.fc(fc_sig) ,	// output [2:0] fc_sig
	.ipl_n(ipl_n_sig) ,	// input [2:0] ipl_n_sig
	.io_rd(io_rd_sig) ,	// input  io_rd_sig
	.io_wr(io_wr_sig) ,	// input  io_wr_sig
	.io_ext(io_ext_sig) ,	// input  io_ext_sig
	.io_reg(io_reg_sig) ,	// input  io_reg_sig
	.io_rdy(io_rdy_sig) ,	// output  io_rdy_sig
	.io_din(io_din_sig) ,	// output [15:0] io_din_sig
	.io_dout(io_dout_sig) ,	// input [15:0] io_dout_sig
	.inst_in(inst_in_sig) ,	// input [19:0] inst_in_sig
	.cc_upd(cc_upd_sig) ,	// input  cc_upd_sig
	.alu_op(alu_op_sig) ,	// input [3:0] alu_op_sig
	.a_src(a_src_sig) ,	// input [15:0] a_src_sig
	.b_src(b_src_sig) ,	// input [15:0] b_src_sig
	.v_flg(v_flg_sig) ,	// output  v_flg_sig
	.insw(insw_sig) ,	// output [15:0] insw_sig
	.extw(extw_sig) ,	// output [15:0] extw_sig
	.ea1b(ea1b_sig) ,	// output [15:0] ea1b_sig
	.ccr_in(ccr_in_sig) ,	// input [4:0] ccr_in_sig
	.sr_out(sr_out_sig) ,	// output [10:0] sr_out_sig
	.flg_c(flg_c_sig) ,	// output [10:0] flg_c_sig
	.loop_cnt(loop_cnt_sig) ,	// input [3:0] loop_cnt_sig
	.reg_addr(reg_addr_sig) ,	// output [5:0] reg_addr_sig
	.reg_wr(reg_wr_sig) ,	// output  reg_wr_sig
	.reg_bena(reg_bena_sig) ,	// output [1:0] reg_bena_sig
	.dbg_pc(dbg_pc_sig) ,	// output [31:0] dbg_pc_sig
	.dbg_if(dbg_if_sig) 	// output  dbg_if_sig
);

