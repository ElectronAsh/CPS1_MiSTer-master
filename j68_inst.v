// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Fri Nov 09 05:54:23 2018

j68 j68_inst
(
	.rst(rst) ,	// input  rst
	.clk(clk) ,	// input  clk
	.rd_ena(rd_ena) ,	// output  rd_ena
	.wr_ena(wr_ena) ,	// output  wr_ena
	.data_ack(data_ack) ,	// input  data_ack
	.byte_ena(byte_ena) ,	// output [1:0] byte_ena
	.address(address) ,	// output [31:0] address
	.rd_data(rd_data) ,	// input [15:0] rd_data
	.wr_data(wr_data) ,	// output [15:0] wr_data
	.fc(fc) ,	// output [2:0] fc
	.ipl_n(ipl_n) ,	// input [2:0] ipl_n
	.dbg_reg_addr(dbg_reg_addr) ,	// output [3:0] dbg_reg_addr
	.dbg_reg_wren(dbg_reg_wren) ,	// output [3:0] dbg_reg_wren
	.dbg_reg_data(dbg_reg_data) ,	// output [15:0] dbg_reg_data
	.dbg_sr_reg(dbg_sr_reg) ,	// output [15:0] dbg_sr_reg
	.dbg_pc_reg(dbg_pc_reg) ,	// output [31:0] dbg_pc_reg
	.dbg_usp_reg(dbg_usp_reg) ,	// output [31:0] dbg_usp_reg
	.dbg_ssp_reg(dbg_ssp_reg) ,	// output [31:0] dbg_ssp_reg
	.dbg_vbr_reg(dbg_vbr_reg) ,	// output [31:0] dbg_vbr_reg
	.dbg_cycles(dbg_cycles) ,	// output [31:0] dbg_cycles
	.dbg_ifetch(dbg_ifetch) ,	// output  dbg_ifetch
	.dbg_irq_lvl(dbg_irq_lvl) 	// output [2:0] dbg_irq_lvl
);

