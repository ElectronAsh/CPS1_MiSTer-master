// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Mon Oct 22 21:31:51 2018

TG68KdotC_Kernel TG68KdotC_Kernel_inst
(
	.clk(clk) ,	// input  clk
	.nReset(nReset) ,	// input  nReset
	.clkena_in(clkena_in) ,	// input  clkena_in
	.data_in(data_in) ,	// input [15:0] data_in
	.IPL(IPL) ,	// input [2:0] IPL
	.IPL_autovector(IPL_autovector) ,	// input  IPL_autovector
	.berr(berr) ,	// input  berr
	.CPU(CPU) ,	// input [1:0] CPU
	.addr(addr) ,	// output [31:1] addr
	.data_write(data_write) ,	// output [15:0] data_write
	.nWr(nWr) ,	// output  nWr
	.nUDS(nUDS) ,	// output  nUDS
	.nLDS(nLDS) ,	// output  nLDS
	.busstate(busstate) ,	// output [1:0] busstate
	.nResetOut(nResetOut) ,	// output  nResetOut
	.FC(FC) ,	// output [2:0] FC
	.clr_berr(clr_berr) ,	// output  clr_berr
	.skipFetch(skipFetch) ,	// output  skipFetch
	.regin(regin) ,	// output [31:0] regin
	.CACR_out(CACR_out) ,	// output [3:0] CACR_out
	.VBR_out(VBR_out) 	// output [31:0] VBR_out
);

defparam TG68KdotC_Kernel_inst.SR_Read = 0;
defparam TG68KdotC_Kernel_inst.VBR_Stackframe = 0;
defparam TG68KdotC_Kernel_inst.extAddr_Mode = 0;
defparam TG68KdotC_Kernel_inst.MUL_Mode = 0;
defparam TG68KdotC_Kernel_inst.DIV_Mode = 0;
defparam TG68KdotC_Kernel_inst.BitField = 0;
defparam TG68KdotC_Kernel_inst.TASbug = 0;
